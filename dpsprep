#!/usr/bin/env python

from pathlib import Path
import functools
import multiprocessing
import shutil
import sys

from loguru import logger
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
import click
import djvu.decode

from src.dpsprep.outline import OutlineTransformVisitor
from src.dpsprep.paths import PdfPaths
from src.dpsprep.pdf import djvu_page_to_pdf, merge_combined_from_fs


def process_single_page(paths: PdfPaths, quality: int, overwrite: bool, i: int):
    if paths.get_page_pdf_path(i).exists():
        if overwrite:
            logger.info(f'Regenerating page {i + 1}')
        else:
            logger.info(f'Page {i + 1} already processed')
            return
    else:
        logger.info(f'Processing page {i + 1}')

    document = djvu.decode.Context().new_document(
        djvu.decode.FileURI(paths.src)
    )
    document.decoding_job.wait()

    store = djvu_page_to_pdf(document.pages[i], quality)

    with open(paths.get_page_pdf_path(i), 'wb') as file:
        file.write(store.getbuffer())

    logger.info(f'Page {i + 1} processed and written to cache')


@click.option('-p', '--pool', type=click.IntRange(min=0), default=4, help='Size of MultiProcessing pool for handling page-by-page operations.')
@click.option('-q', '--quality', type=click.IntRange(min=0, max=100), default=75, help='Quality of images in output. Between 0 and 100. Passed directly to Pillow.')
@click.option('-v', '--verbose', is_flag=True, help='Display debug messages.')
@click.option('-r', '--reprocess', is_flag=True, help='Ignore cached pages.')
@click.option('-o', '--overwrite', is_flag=True, help='Overwrite destination file.')
@click.argument('dest', type=click.Path(exists=False, resolve_path=True), required=False)
@click.argument('src', type=click.Path(exists=True, resolve_path=True), required=True)
@click.command()
def dpsprep(src: str, dest: str | None, quality: int, pool: int, verbose: bool, reprocess: bool, overwrite: bool):
    logger.remove()
    logger.add(
        sys.stdout,
        format='<level>{level}</level> <green>{time:HH:mm:ss}</green> <level>{message}</level>',
        level='DEBUG' if verbose else 'INFO'
    )

    paths = PdfPaths(src, dest)

    if not overwrite and paths.dest.exists():
        logger.error(f'File {paths.dest} already exists.')
        return

    logger.info(f'Processing {paths.src} with {pool} workers.')
    document = djvu.decode.Context().new_document(
        djvu.decode.FileURI(paths.src)
    )
    document.decoding_job.wait()
    num_pages = len(document.pages)

    pdfmetrics.registerFont(
        TTFont(
            'Invisible',
            Path(__file__).parent / 'invisible1.ttf'
        )
    )

    multiprocessing.Pool(processes=pool).map(
        functools.partial(process_single_page, paths, quality, reprocess),
        range(num_pages)
    )

    output_pdf = merge_combined_from_fs(paths, range(num_pages))

    if len(document.outline.sexpr) > 0:
        outline_visitor = OutlineTransformVisitor(output_pdf)
        outline_visitor.visit(document.outline.sexpr)

    with open(paths.dest, 'wb') as file:
        output_pdf.write(file)

    logger.debug('Deleting the working directory.')
    shutil.rmtree(paths.working)


if __name__ ==  '__main__':
    dpsprep()
