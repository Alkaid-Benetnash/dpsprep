#!/usr/bin/python
# dpsprep - Sony Digital Paper DJVU to PDF converter
# Copyright(c) 2015 Kevin Croker
# GNU GPL v3
#
import sexpdata
import argparse
import os
import pipes
import subprocess

def walk_bmarks(bmarks, level):
    output = ''
    wroteTitle = False
    for j in bmarks:
        if isinstance(j, list):
            output = output + walk_bmarks(j, level + 1)
        elif isinstance(j, str):
            if not wroteTitle:
                output = output + "BookmarkBegin\nBookmarkTitle: %s\nBookmarkLevel: %d\n" % (j, level)
                wroteTitle = True 
            else:    
                output = output + "BookmarkPageNumber: %s\n" % j.split('#')[1]
                wroteTitle = False
        else:
            pass
            
    return output

home = os.path.expanduser("~")

# From Python docs, nice and slick command line arguments
parser = argparse.ArgumentParser(description='Convert DJVU format to PDF format preserving OCRd text and metadata.')
parser.add_argument('src', metavar='djvufile', type=str, 
                    help='the source DJVU file')
parser.add_argument('dest', metavar='pdffile', type=str,
                    help='the destination PDF file')
parser.add_argument('-q, --quality', dest='quality', type=int, default=80,
                    help='specify JPEG lossy compression quality (50-150).  See man ddjvu for more information.')
args = parser.parse_args()

if not os.path.exists(home + "/.dpsprep"):
    os.mkdir(home + "/.dpsprep")

tmp = home + "/.dpsprep"

# Reescape the filenames because we will just be sending them to commands via system 
# and we don't otherwise work directly with the DJVU and PDF files.
# Also, stash the temp pdf in the clean spot
args.src = pipes.quote(args.src)
args.dest = home + '/.dpsprep/' + pipes.quote(args.dest)

# Make the PDF, compressing with JPG so they are not ridiculous in size
# (cwd)
if not os.path.isfile(tmp + '/dumpd'):
    os.system("ddjvu -v -eachpage -format=tiff %s %s/pg%%06d.tif" % (args.src, tmp))
    print "Flat PDF made..."
    open(tmp + '/dumpd', 'a').close()
else:
    print "Inflated PDFs already found, using these..."

# Extract and embed the text
if not os.path.isfile(tmp + '/hocrd'):
    cnt = int(subprocess.check_output("djvused %s -e n" % args.src, shell=True))

    for i in range(1,cnt):
        os.system("djvu2hocr -p %d %s | sed 's/ocrx/ocr/g' > %s/pg%06d.html" % (i, args.src, tmp, i))

    open(tmp + '/hocrd', 'a').close()
else:
    print "Using existing hOCRd output..."

# Is sloppy and dumps to present directory
if not os.path.isfile(tmp + '/beadd'):
    cwd = os.getcwd()
    os.chdir(tmp)
    os.system('pdfbeads * > ' + args.dest)
    open('beadd', 'a').close()
    os.chdir(cwd)
else:
    print "Existing destination found, assuming beading already complete"

###########################$
#
# At this point, the OCRd text is now properly placed within the PDF file.
# Now, we need to add the links and table of contents! 

# Extract the bookmark data from the DJVU document 
# (scratch)
os.system("djvused %s -e 'print-outline' > %s/bmarks.out" % (args.src, tmp))
print "Bookmarks extracted."

# Extract the metadata from the PDF document
os.system("pdftk %s dump_data > %s/pdfmetadata.out" % (args.dest, tmp))
print "Original PDF metadata extracted."

# Parse the sexpr
bmarks = sexpdata.load(open(tmp + '/bmarks.out'))
print bmarks

# Walk the sexpr and convert it into PDF metadata format
print walk_bmarks(bmarks, 1)

# Integrate the parsed bookmarks into the PDF metadata

# Update the PDF metadata

# Reposition the final file

# Remove the temporary files
